// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Etherlands

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DistrictPlayerPermissionMap struct {
	_tab flatbuffers.Table
}

func GetRootAsDistrictPlayerPermissionMap(buf []byte, offset flatbuffers.UOffsetT) *DistrictPlayerPermissionMap {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DistrictPlayerPermissionMap{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DistrictPlayerPermissionMap) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DistrictPlayerPermissionMap) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DistrictPlayerPermissionMap) Districts(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *DistrictPlayerPermissionMap) DistrictsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DistrictPlayerPermissionMap) MutateDistricts(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *DistrictPlayerPermissionMap) Permissions(obj *PlayerPermissionMap, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DistrictPlayerPermissionMap) PermissionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DistrictPlayerPermissionMapStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DistrictPlayerPermissionMapAddDistricts(builder *flatbuffers.Builder, districts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(districts), 0)
}
func DistrictPlayerPermissionMapStartDistrictsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func DistrictPlayerPermissionMapAddPermissions(builder *flatbuffers.Builder, permissions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(permissions), 0)
}
func DistrictPlayerPermissionMapStartPermissionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DistrictPlayerPermissionMapEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
