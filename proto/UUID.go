// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Etherlands

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UUID struct {
	_tab flatbuffers.Struct
}

func (rcv *UUID) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UUID) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *UUID) B0() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *UUID) MutateB0(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *UUID) B1() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *UUID) MutateB1(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func (rcv *UUID) B2() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *UUID) MutateB2(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *UUID) B3() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(3))
}
func (rcv *UUID) MutateB3(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(3), n)
}

func (rcv *UUID) B4() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *UUID) MutateB4(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *UUID) B5() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(5))
}
func (rcv *UUID) MutateB5(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(5), n)
}

func (rcv *UUID) B6() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(6))
}
func (rcv *UUID) MutateB6(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(6), n)
}

func (rcv *UUID) B7() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(7))
}
func (rcv *UUID) MutateB7(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(7), n)
}

func (rcv *UUID) B8() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *UUID) MutateB8(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *UUID) B9() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(9))
}
func (rcv *UUID) MutateB9(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(9), n)
}

func (rcv *UUID) B10() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(10))
}
func (rcv *UUID) MutateB10(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(10), n)
}

func (rcv *UUID) B11() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(11))
}
func (rcv *UUID) MutateB11(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(11), n)
}

func (rcv *UUID) B12() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *UUID) MutateB12(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *UUID) B13() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(13))
}
func (rcv *UUID) MutateB13(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(13), n)
}

func (rcv *UUID) B14() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(14))
}
func (rcv *UUID) MutateB14(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(14), n)
}

func (rcv *UUID) B15() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(15))
}
func (rcv *UUID) MutateB15(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(15), n)
}

func CreateUUID(builder *flatbuffers.Builder, b0 byte, b1 byte, b2 byte, b3 byte, b4 byte, b5 byte, b6 byte, b7 byte, b8 byte, b9 byte, b10 byte, b11 byte, b12 byte, b13 byte, b14 byte, b15 byte) flatbuffers.UOffsetT {
	builder.Prep(1, 16)
	builder.PrependByte(b15)
	builder.PrependByte(b14)
	builder.PrependByte(b13)
	builder.PrependByte(b12)
	builder.PrependByte(b11)
	builder.PrependByte(b10)
	builder.PrependByte(b9)
	builder.PrependByte(b8)
	builder.PrependByte(b7)
	builder.PrependByte(b6)
	builder.PrependByte(b5)
	builder.PrependByte(b4)
	builder.PrependByte(b3)
	builder.PrependByte(b2)
	builder.PrependByte(b1)
	builder.PrependByte(b0)
	return builder.Offset()
}
